#!/bin/bash
###############################################
# ssg++ web arayuzunu servis olarak baslatip kapatmak icin bir betik.
# kullanimi: ssgppd {start|stop|restart|status}
#
# Start on runlevels 3, 4 and 5. Start late, kill early.
# chkconfig: 345 95 05
#
# author: oderin at users sourceforge net
###############################################


###############################################
# ssg++ betiklerinin oldugu klasoru bul
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

SSGPP_SCRIPTS_DIR="$DIR"
#echo 'SSGPP_SCRIPTS_DIR:' $SSGPP_SCRIPTS_DIR
###############################################

# absolute path to executable binary
#progpath='/shared/gezgin/opt/custom_shell_scripts/ssgpp_message_poller.sh'
progpath="$SSGPP_SCRIPTS_DIR/ssgpp-server"

# arguments to script: $1 start, stop, status ...
# REMOVED (instead use the .properties conf.) $2: polling period in minutes
#opts=$2
opts=

# binary program name
prog=$(basename $progpath)

# pid file
#pidfile="/var/run/${prog}.pid"
pidfile="$SSGPP_SCRIPTS_DIR/${prog}.pid"

# make sure full path to executable binary is found
! [ -x $progpath ] && echo "$progpath: executable not found" && exit 1

eval_cmd() {
  local rc=$1
  if [ $rc -eq 0 ]; then
    echo '[  OK  ]'
  else
    echo '[FAILED]'
  fi
  return $rc
}

start() {
  # see if running
  local pids=$(pgrep -f $prog)

  if [ -n "$pids" ]; then
    echo "$prog (pid $pids) is already running"
    return 0
  fi
  printf "%-50s%s" "Starting $prog: " ''
  $progpath $opts &

  # save pid to file if you want
  echo $! > $pidfile

  # check again if running
  pgrep -f $prog >/dev/null 2>&1
  eval_cmd $?
}

stop() {
  # see if running
  local pids=$(pgrep -f $prog)

  if [ -z "$pids" ]; then
    echo "$prog not running"
    return 0
  fi
  printf "%-50s%s" "Stopping $prog: " ''
  rm -f $pidfile
#  kill -9 $pids
  CPIDS=$(pgrep -P $pids); #(sleep 33 && kill -KILL $CPIDS &); kill -TERM $CPIDS
  kill -TERM $CPIDS
  eval_cmd $?
}

status() {
  # see if running
  local pids=$(pgrep -f $prog)

  if [ -n "$pids" ]; then
    echo "$prog (pid $pids) is running"
  else
    echo "$prog is stopped"
  fi
}

case $1 in
  start)
    start
    ;;
  stop)
    stop
    ;;
  status)
    status
    ;;
  restart)
    stop
    sleep 1
    start
    ;;
  *)
    echo "Usage: $0 {start|stop|status|restart}"
    exit 1
esac

exit $?
